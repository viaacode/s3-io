apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: s3-io-worker
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
    creationTimestamp: null
    generation: 8
    labels:
      app: s3-io
      ENV: ${ENV}
      component: worker
    name: s3-io-worker-${ENV}
  spec:
    replicas: 0
    selector:
      app: s3-io
      component: worker
      ENV: ${ENV}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          component: worker
          ENV: ${ENV}
          app: s3-io
      spec:
        containers:
          - env:
            - name: CASTOR_SWARMDOMAIN
              value: s3.domain.org
            - name: CASTOR_SWARMURL
              value: swarmget.do.domain.org
            - name: CELERY_BROKER_URL
              value: amqp://user:xxx@mq5672/py_workers
            - name: CELERY_RES_BACKEND
              value: elasticsearch://do.domain.org:9200/s3io-dev/results
            - name: CONSUMER_URI
              value: amqp://admin:xx@mq:5672/
            - name: DOWNLCHUNCKS_DOMAIN
              value: s3.domain.org
            - name: REMOTECURL_DOMAIN_HEADER
              value: s3.domain.org
            - name: REMOTECURL_HOST
              value: do.domain.org
            - name: REMOTECURL_PASSW
              value: xxxx
            - name: REMOTECURL_USER
              value: root
            - name: S3_TO_FTP_ACCESS_KEY
              value: xxxxxxxxx
            - name: S3_TO_FTP_PASSOWRD
              value: xxxx
            - name: S3_TO_FTP_SECRET_KEY
              value: xx
            - name: S3_TO_FTP_SERVER
              value: ftpx.domain.org
            - name: S3_TO_FTP_USER
              value: xxx
            image: docker-registry.default.svc:5000/s3-components/s3-io
            imagePullPolicy: Always
            command:
              - s3io-scalable
            name: s3-io-worker-${ENV}
            readinessProbe:
              exec:
                command: [
                  "sh",
                  "-c",
                  "celery inspect ping -A s3_io.s3io_tasks -d s3-io-worker@$(hostname) | egrep OK && exit 0"
                ]
              initialDelaySeconds: 125
              successThreshold: 1
              periodSeconds: 180
              failureThreshold: 5
              timeoutSeconds: 20
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            resources:
              limits:
                cpu: '${cpu_limit}m'
                memory: '${memory_limit}Mi'
              requests:
                cpu: '${cpu_requested}m'
                memory: '${memory_requested}Mi'
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 3600
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - s3-io-worker-${ENV}
        from:
          kind: ImageStreamTag
          name: s3-io:${ENV}
          namespace: s3-components
        lastTriggeredImage: ''
      type: ImageChange
  status: {}
parameters:
  - name: ENV
    value: qas
  - name: 'memory_requested'
    value: '128'
  - name: 'memory_limit'
    value: '328'
  - name: 'cpu_requested'
    value: '100'
  - name: 'cpu_limit'
    value: '300'