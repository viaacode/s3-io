apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: s3-io-frontend
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
    creationTimestamp: null
    generation: 8
    labels:
      app: s3-io
      ENV: ${ENV}
      component: frontend
    name: s3-io-frontend-${ENV}
  spec:
    replicas: 0
    selector:
      app: s3-io
      component: frontend
      ENV: ${ENV}

    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          component: frontend
          ENV: ${ENV}
          app: s3-io
      spec:
        containers:
        - env:
          - name: CASTOR_SWARMDOMAIN
            value: s3.domain.org
          - name: CASTOR_SWARMURL
            value: swarmget.do.domain.org
          - name: CELERY_BROKER_URL
            value: amqp://user:xxx@mq5672/py_workers
          - name: CELERY_RES_frontend
            value: elasticsearch://do.domain.org:9200/s3io-dev/results
          - name: CONSUMER_URI
            value: amqp://admin:xx@mq:5672/
          - name: DOWNLCHUNCKS_DOMAIN
            value: s3.domain.org
          - name: REMOTECURL_DOMAIN_HEADER
            value: s3.domain.org
          - name: REMOTECURL_HOST
            value: do.domain.org
          - name: REMOTECURL_PASSW
            value: xxxx
          - name: REMOTECURL_USER
            value: root
          - name: S3_TO_FTP_ACCESS_KEY
            value: xxxxxxxxx
          - name: S3_TO_FTP_PASSOWRD
            value: xxxx
          - name: S3_TO_FTP_SECRET_KEY
            value: xx
          - name: S3_TO_FTP_SERVER
            value: ftpx.domain.org
          - name: S3_TO_FTP_USER
            value: xxx
          image: docker-registry.default.svc:5000/s3-components/s3-io@sha256:0699b600d5881292bc9806c943d9852db110b06c0bbc2a2a3fafb3fc2fc7d44f
          imagePullPolicy: Always
          command:
            - s3io-api
          name: s3-io-frontend-${ENV}
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - s3-io-frontend-${ENV}
        from:
          kind: ImageStreamTag
          name: s3-io:${ENV}
          namespace: s3-components
        lastTriggeredImage: docker-registry.default.svc:5000/s3-components/s3-io@sha256:0699b600d5881292bc9806c943d9852db110b06c0bbc2a2a3fafb3fc2fc7d44f
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      git-branch: master
    creationTimestamp: null
    labels:
      ENV: ${ENV}
      component: frontend
      app: s3-io
    name: s3-io-${ENV}
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      ENV: ${ENV}
      app: s3-io
      component: frontend
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

parameters:
  - name: ENV
    value: qas
